import mongoose from 'mongoose'
import authRoles from '../utils/authRoles.js';
import bcrypt from 'bcryptjs';
import JWT from 'jsonwebtoken'
import config from '../config/index.js'
import crypto from 'crypto'

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: ["true", "Name is required"],
    minLength : [5,"Name must be minimum 4 chars"],
    maxLength: [50, "Name must be less than 50 chars"]
  },
  email: {
    type: String,
    required: [true, "Email is required"],
    unique : true
  },
  password: {
    type: String,
    required: [true, "Password is required"],
    minLength: [8, "password is minimum  8 chars"],
    select: false,
  },
  role: {
    type: String,
    enum: Object.values(authRoles),
    default: authRoles.USER
  },
  forgotPasswordToken: String,
  forgotPasswordExpiry: Date
}, { timestamps: true })

// Encrypt the password before saving
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next()
  this.password = await bcrypt.hash(this.password, 10)
  next()
})

userSchema.methods = {
  // compare passwords
  comparePassword: async function (enteredPassword) {
    return await bcrypt.compare(enteredPassword, this.password)
  },
  // generate JWT token
  getJWTtoken: function () {
    return JWT.sign({ _id: this._id, role: this.role }, config.JWT_SECRET,
      { expiresIn: config.JWT_EXPIRY })
  },
  // forgot password functionality
  generateForgotPasswordToken: function () {
    const forgotToken = crypto.randomBytes(20).toString('hex')
    // encrypt the token generated by crypto
    this.forgotPasswordToken = crypto
      .createHash('sha256')
      .update(forgotToken)
    // time for token to expiry
    this.forgotPasswordExpiry = Date.now() + 20 * 60 * 1000;
    return forgotToken
  }

}

export default mongoose.model('User', userSchema)
